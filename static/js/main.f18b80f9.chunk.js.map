{"version":3,"sources":["assets/images/proc-cerveau.jpg","assets/images/technologie.jpg","assets/images/gt2100.jpg","assets/images/avantages.jpg","assets/images/aspects.jpg","components/Puzzle.jpg","assets/images/header.jpg","containers/Header.js","containers/Interface.js","containers/Technologie.js","containers/Gt2100.js","containers/Avantages.js","containers/AspectsLegaux.js","components/ContactForm.js","containers/Contact.js","components/Puzzle.js","containers/TestLogique.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","title1","color","backgroundColor","padding","Header","Box","className","style","Component","Interface","Container","Grid","container","direction","spacing","justify","item","xs","md","Card","CardMedia","component","alt","height","image","procCerveauImg","title","Technologie","technoImg","Gt2100","gt2100Img","Avantages","avantagesImg","AspectsLegaux","aspectsImg","useStyles","makeStyles","theme","display","textField","dense","marginTop","menu","width","OutlinedTextFields","classes","noValidate","autoComplete","TextField","id","label","margin","variant","fullWidth","type","name","multiline","rows","defaultValue","Button","button","Contact","alignItems","tilesStyle","listStyle","position","bgPosition","tileStyle","backgroundImage","backgroundimg","backgroundSize","boxShadow","boxSizing","holeStyle","opacity","buttonStyle","timerStyle","textAlign","isSolvable","numbers","cols","product","i","l","j","m","Math","round","isSolved","length","getMatrixPosition","index","row","floor","col","Tile","handleClick","bind","this","props","onClick","hole","number","visualPos","x","y","getVisualPosition","motionStyle","translateX","spring","translateY","backgroundPosition","transform","Tiles","state","_","range","timerStarted","timerStopped","minutes","seconds","cSeconds","captures","handleTileClick","handleRestartButtonClick","setState","timer","setInterval","prevState","clearInterval","swap","shuffle","shuffledNumbers","without","concat","tileIndex","holeIndex","indexOf","src","dest","srcRow","srcCol","destRow","destCol","abs","canSwap","newNumbers","clone","handleTimerStop","event","handleTimerRestart","handleTimerStart","solved","pieceWidth","pieceHeight","map","key","buttonClick","Puzzle","TestLogique","bgSecondary","headerStyle","headerimg","backgroundRepeat","minHeight","App","p","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f18b80f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/proc-cerveau.c9658d69.jpg\";","module.exports = __webpack_public_path__ + \"static/media/technologie.5ddf6cff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gt2100.b70f36af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/avantages.b07464bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/aspects.779a69da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Puzzle.40486cf5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/header.1b346c09.jpg\";","import React, { Component } from 'react'\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst title1 = {\r\n    color: 'white',\r\n    backgroundColor: 'black',\r\n    padding: '20px'\r\n}\r\n\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n          <Box >\r\n              <h1 className=\"title1\" style={title1}>Formulabs</h1>\r\n          </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport procCerveauImg from \"../assets/images/proc-cerveau.jpg\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\nclass Interface extends Component {\r\n    render() {\r\n        return (\r\n          <Container className=\"interface\">\r\n            <Grid container direction=\"row-reverse\" spacing={4}>\r\n              <Grid container justify=\"center\" direction=\"column\" item xs={12} md={6} >\r\n                <Container>\r\n                  <h3>Interfaces processeur-cerveau</h3>\r\n                  <p>\r\n                    Formulabs propose des solutions innovantes dans le cadre le\r\n                    la connexion du cerveau humain et des dernières technologies\r\n                    CPU. Les études cliniques ont duré plus de vingt années et\r\n                    nos résultats sont désormais validés. Nos premières\r\n                    interfaces neuronales sont donc dès à présent disponibles.\r\n                  </p>\r\n                </Container>\r\n              </Grid>\r\n              <Grid className=\"procCerveauIllu\" item xs={12} md={6}>\r\n                <Card>\r\n                    <CardMedia\r\n                      component=\"img\"\r\n                      alt=\"Contemplative Reptile\"\r\n                      height=\"400\"\r\n                      image={procCerveauImg}\r\n                      title=\"Contemplative Reptile\"\r\n                    />\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*\r\n\r\n\r\n<img\r\n                  alt=\"interface processeur-cervau\"\r\n                  src={procCerveauImg}\r\n                  style={imgStyles}\r\n                ></img>\r\n\r\n*/\r\nexport default Interface\r\n","import React, { Component } from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport technoImg from '../assets/images/technologie.jpg'\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\n\r\nclass Technologie extends Component {\r\n    render() {\r\n        return (\r\n          <Container className=\"techno\">\r\n            <Grid container spacing={4}>\r\n              <Grid\r\n                container\r\n                justify=\"center\"\r\n                direction=\"column\"\r\n                item\r\n                xs={12}\r\n                md={6}\r\n              >\r\n                <Container>\r\n                  <h3>La technologie</h3>\r\n                  <p>\r\n                    L'interface entre le cerveau humain et la puissance de\r\n                    calcul d'un processeur n'est désormais plus un rêve. Les\r\n                    laboratoires de Formulabs ont mis au point un procédé\r\n                    breveté et unique au monde permettant d'implanter une\r\n                    processeur au sein d'un cerveau organique.\r\n                  </p>\r\n                  <p>\r\n                    La connexion entre l'organe humain et son annexe numérique\r\n                    se fait au travers d'un réseau neuronal artificiel\r\n                    intermédiaire qui est posé lors de l'opération.\r\n                    L'installation des composants est sans douleur et\r\n                    parfaitement sans risque.\r\n                  </p>\r\n                  <p>\r\n                    La technologie Formulabs est fiable et offre des\r\n                    possibilités absolument incroyables. Nos clients affichent\r\n                    un taux de satisfaction proche de 100%.\r\n                  </p>\r\n                </Container>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <Card>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    alt=\"Technologie\"\r\n                    height=\"400\"\r\n                    image={technoImg}\r\n                    title=\"Technologie\"\r\n                  />\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Technologie\r\n","import React, { Component } from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport gt2100Img from \"../assets/images/gt2100.jpg\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\nclass Gt2100 extends Component {\r\n    render() {\r\n        return (\r\n          <Container className=\"gt2100\">\r\n            <Grid container direction=\"row-reverse\" spacing={4}>\r\n              <Grid container justify=\"center\" direction=\"column\" className=\"gt2100Content\" item xs={12} md={6}>\r\n                <Container>\r\n                  <h3>La puce GT2100</h3>\r\n                  <p>\r\n                    Notre gamme actuelle comprend un processeur unique, le GT2100.\r\n                    Il offre une puissance de calcul d e 841,73 GFLOPS. Cette puce\r\n                    est produite dans des conditions très stricte et dans des\r\n                    matériaux bio-compatibles évitant tout risque de rejet.\r\n                  </p>\r\n                  <p>\r\n                    La puce GT2100 est aussi doté d'un récepteur TMZ permettant\r\n                    des updates réguliers sans aucun risque de nuisances pour le\r\n                    corps. Cette puce est un produit unique sur le marché, elle\r\n                    constitue une révolution majeur dans le domaine des\r\n                    neurosciences.\r\n                  </p>\r\n                </Container>\r\n                \r\n              </Grid>\r\n              <Grid className=\"gt2100Illu\" item xs={12} md={6}>\r\n                <Card>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    alt=\"GT 2100\"\r\n                    height=\"400\"\r\n                    image={gt2100Img}\r\n                    title=\"GT 2100\"\r\n                  />\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Gt2100\r\n","import React, { Component } from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport avantagesImg from \"../assets/images/avantages.jpg\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\n\r\nclass Avantages extends Component {\r\n    render() {\r\n        return (\r\n          <Container className=\"avantages\">\r\n            <Grid container spacing={4}>\r\n              <Grid\r\n                container\r\n                justify=\"center\"\r\n                direction=\"column\"\r\n                item\r\n                xs={12}\r\n                md={6}\r\n              >\r\n                <Container>\r\n                  <h3>Les avantages du Formulabs GT2100</h3>\r\n\r\n                  <p>\r\n                    L'installation de la puce GT2100 permet l'augmentation de\r\n                    nombreuses facultés du cerveau. En voici une liste non\r\n                    exhaustive:\r\n                  </p>\r\n\r\n                  <ul>\r\n                    <li>\r\n                      <p>\r\n                        Augmentation du nombre de couleurs perçues et de la\r\n                        netteté générale\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p>Capacité artistiques augmentées jusqu'à 750%</p>\r\n                    </li>\r\n                    <li>\r\n                      <p>\r\n                        Possibilité de travailler en multitâche et donc de\r\n                        gagner un temps précieux\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p>Capacité maximale de calcul numérique</p>\r\n                    </li>\r\n                    <li>\r\n                      <p>\r\n                        Possibilité d'une connexion Internet donnant accès à des\r\n                        milliards d'informations\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p>Capacités logiques décuplées</p>\r\n                    </li>\r\n                  </ul>\r\n                </Container>\r\n              </Grid>\r\n              <Grid className=\"avantagesIllu\" item xs={12} md={6}>\r\n                <Card>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    alt=\"Avantages\"\r\n                    height=\"400\"\r\n                    image={avantagesImg}\r\n                    title=\"aAantages\"\r\n                  />\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Avantages\r\n","import React, { Component } from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport aspectsImg from \"../assets/images/aspects.jpg\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\nclass AspectsLegaux extends Component {\r\n    render() {\r\n        return (\r\n          <Container className=\"aspectsLegaux\">\r\n            <Grid container spacing={4}>\r\n              <Grid container justify=\"center\" direction=\"column\" className=\"aspectsContent\" item xs={12} md={6}>\r\n                <Container>\r\n                  <h3>Aspects légaux liés à l'augmentation</h3>\r\n                <p>\r\n                  Le cerveau est donc couplé au processeur Formulabs. Notre\r\n                  client est donc considéré dès l'installation de notre puce,\r\n                  dans la catégorie des humains augmentés. Veuillez noter que\r\n                  cela n'affectera en rien vos droits et devoirs en tant que\r\n                  citoyen dans votre pays.\r\n                </p>\r\n                <p>\r\n                  Il est tout de même obligatoire de vous enregistrer au service\r\n                  international de répertorisation des augmentations non\r\n                  biologiques. C'est une démarche administrative simple dont\r\n                  nous pouvons nous occuper sur demande.\r\n                </p>\r\n                <p>\r\n                  Vos futurs employeurs seront systématiquement averti de votre\r\n                  Augmentation, ce qui est souvent considéré comme un atout non\r\n                  négligeable.\r\n                </p>\r\n                </Container>\r\n              </Grid>\r\n              <Grid className=\"aspectsIllu\" item xs={12} md={6}>\r\n                <Card>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    alt=\"Asects Légaux\"\r\n                    height=\"400\"\r\n                    image={aspectsImg}\r\n                    title=\"Aspects Légaux\"\r\n                  />\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AspectsLegaux\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: \"flex\",\r\n  },\r\n  textField: {\r\n  },\r\n  dense: {\r\n    marginTop: theme.spacing(2)\r\n  },\r\n  menu: {\r\n    width: 200\r\n  }\r\n}));\r\n\r\nexport default function OutlinedTextFields() {\r\n  const classes = useStyles();\r\n  return (\r\n    <form className={classes.container} noValidate autoComplete=\"off\">\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            id=\"outlined-name\"\r\n            label=\"Nom\"\r\n            className={classes.textField}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            id=\"outlined-email-input\"\r\n            label=\"Email\"\r\n            className={classes.textField}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            id=\"outlined-multiline-static\"\r\n            label=\"Laissez nous un message\"\r\n            multiline\r\n            rows=\"6\"\r\n            defaultValue=\"\"\r\n            className={classes.textField}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button variant=\"outlined\" className={classes.button}>\r\n            Envoyer\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ContactForm from '../components/ContactForm'\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nclass Contact extends Component {\r\n    render() {\r\n        return (\r\n          <Container className=\"contact\">\r\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={4} >\r\n              <Grid item container xs={12} md={6}>\r\n                <Grid className=\"contactContent\" item xs={12}>\r\n                  <Container>\r\n                    <h3>Formulaire de contact</h3>\r\n                  <p>\r\n                    Si vous souhaitez nous rencontrer ou simplement obtenir plus\r\n                    d'information sur nos services, merci de remplir ce\r\n                    formulaire:\r\n                  </p>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid className=\"contactForm\" item xs={12}>\r\n                  <Container>\r\n                    <ContactForm />\r\n                  </Container>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact\r\n","import React, { Component } from 'react'\r\nimport {Motion, spring} from 'react-motion'\r\nimport _ from \"lodash\";\r\n\r\nimport backgroundimg from './Puzzle.jpg';\r\n\r\n\r\nconst tilesStyle = {\r\n  listStyle: \"none\",\r\n  margin: \"0 auto\",\r\n  padding: 5,\r\n  position: \"relative\"\r\n};\r\n\r\nconst bgPosition = {\r\n    \"0\": \"left top\",\r\n    \"1\": \"center top\",\r\n    \"2\": \"right top\",\r\n    \"3\": \"left center\",\r\n    \"4\": \"center\",\r\n    \"5\": \"right center\",\r\n    \"6\": \"left bottom\",\r\n    \"7\": \"bottom center\",\r\n    \"8\": \"bottom right\"\r\n};\r\n\r\nconst tileStyle = {\r\n  backgroundImage: `url(${backgroundimg})`,\r\n  backgroundSize: \"300%\",\r\n  boxShadow: \"inset 0 0 1px 0 black\",\r\n  boxSizing: \"border-box\",\r\n  display: \"block\",\r\n  padding: 6,\r\n  position: \"absolute\"\r\n};\r\n\r\nconst holeStyle = {\r\n  opacity: 0\r\n};\r\n\r\nconst buttonStyle = {\r\n  display: \"block\",\r\n  margin: \"16px auto\",\r\n  padding: \"8px 16px\"\r\n};\r\n\r\nconst timerStyle = {\r\n  textAlign: 'center'\r\n}\r\n\r\n// Checks if the puzzle can be solved.\r\n//\r\n// Examples:\r\n//   isSolvable([3, 7, 6, 0, 5, 1, 2, 4, 8], 3, 3) // => false\r\n//   isSolvable([6, 4, 5, 0, 1, 2, 3, 7, 8], 3, 3) // => true\r\nfunction isSolvable (numbers, rows, cols) {\r\n  let product = 1\r\n  for (let i = 1, l = rows * cols - 1; i <= l; i++) {\r\n    for (let j = i + 1, m = l + 1; j <= m; j++) {\r\n      product *= (numbers[i - 1] - numbers[j - 1]) / (i - j)\r\n    }\r\n  }\r\n  return Math.round(product) === 1\r\n}\r\n\r\n// Checks if the puzzle is solved.\r\n//\r\n// Examples:\r\n//   isSolved([6, 4, 5, 0, 1, 2, 3, 7, 8]) // => false\r\n//   isSolved([0, 1, 2, 3, 4, 5, 6, 7, 8]) // => true\r\nfunction isSolved (numbers) {\r\n  for (let i = 0, l = numbers.length; i < l; i++) {\r\n    if (numbers[i] !== i) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n// Get the row/col pair from a linear index.\r\nfunction getMatrixPosition (index, rows, cols) {\r\n  return {\r\n    row: Math.floor(index / cols),\r\n    col: index % cols\r\n  }\r\n}\r\n\r\nfunction getVisualPosition ({row, col}, width, height) {\r\n  return {\r\n    x: col * width,\r\n    y: row * height\r\n  }\r\n}\r\n\r\nfunction shuffle (numbers, hole, rows, cols) {\r\n  do {\r\n    numbers = _.shuffle(_.without(numbers, hole)).concat(hole)\r\n  } while (isSolved(numbers) || !isSolvable(numbers, rows, cols))\r\n  return numbers\r\n}\r\n\r\nfunction canSwap (src, dest, rows, cols) {\r\n  const {row: srcRow, col: srcCol} = getMatrixPosition(src, rows, cols)\r\n  const {row: destRow, col: destCol} = getMatrixPosition(dest, rows, cols)\r\n  return (Math.abs(srcRow - destRow) + Math.abs(srcCol - destCol) === 1)\r\n}\r\n\r\nfunction swap (numbers, src, dest) {\r\n  numbers = _.clone(numbers);\r\n  [numbers[src], numbers[dest]] = [numbers[dest], numbers[src]]\r\n  return numbers\r\n}\r\n\r\n\r\n\r\nclass Tile extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    const { index } = this.props;\r\n    this.props.onClick(index);\r\n  }\r\n\r\n  render() {\r\n    const { hole, number, index, rows, cols, width, height } = this.props;\r\n    const matrixPos = getMatrixPosition(index, rows, cols);\r\n    const visualPos = getVisualPosition(matrixPos, width, height);\r\n    const motionStyle = {\r\n      translateX: spring(visualPos.x),\r\n      translateY: spring(visualPos.y)\r\n    };\r\n    const style = {\r\n      ...tileStyle,\r\n      ...(number === hole ? holeStyle : {}),\r\n      width,\r\n      height,\r\n      backgroundPosition: `${bgPosition[number]}`,\r\n    };\r\n\r\n    return (\r\n      <Motion style={motionStyle}>\r\n        {({ translateX, translateY }) => (\r\n          <button style={{\r\n              ...style,\r\n              transform: `translate3d(${translateX}px, ${translateY}px, 0)`,\r\n            }}\r\n            onClick={this.handleClick}\r\n          >\r\n          </button>\r\n        )}\r\n      </Motion>\r\n    );\r\n  }\r\n}\r\n\r\nclass Tiles extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { rows, cols } = props;\r\n    this.state = {\r\n      numbers: _.range(0, rows * cols),\r\n      timerStarted: false,\r\n      timerStopped: true,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      cSeconds: 0,\r\n      captures: []\r\n    };\r\n    this.handleTileClick = this.handleTileClick.bind(this);\r\n    this.handleRestartButtonClick = this.handleRestartButtonClick.bind(this);\r\n  }\r\n\r\n  handleTimerStart() {\r\n    if (this.state.timerStopped) {\r\n      this.setState({ timerStarted: true, timerStopped: false });\r\n      this.timer = setInterval(() => {\r\n        if (this.state.timerStarted) {\r\n          if (this.state.cSeconds >= 99) {\r\n            this.setState(prevState => ({\r\n              seconds: prevState.seconds + 1,\r\n              cSeconds: -1\r\n            }));\r\n          }\r\n          if (this.state.seconds >= 59) {\r\n            this.setState(prevState => ({\r\n              minutes: prevState.minutes + 1,\r\n              seconds: -1\r\n            }));\r\n          }\r\n          this.setState(prevState => ({ cSeconds: prevState.cSeconds + 1 }));\r\n        }\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  handleTimerStop() {\r\n    this.setState({ timerStarted: false, timerStopped: true });\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  handleTimerRestart() {\r\n    this.setState({ minutes: 0, seconds: 0 });\r\n  }\r\n\r\n  handleTileClick(index) {\r\n    this.swap(index);\r\n  }\r\n\r\n  handleRestartButtonClick() {\r\n    this.shuffle();\r\n  }\r\n\r\n  shuffle() {\r\n    const { hole, rows, cols } = this.props;\r\n    const { numbers } = this.state;\r\n    const shuffledNumbers = shuffle(numbers, hole, rows, cols);\r\n    this.setState({ numbers: shuffledNumbers });\r\n  }\r\n\r\n  swap(tileIndex) {\r\n    const { hole, rows, cols } = this.props;\r\n    const { numbers } = this.state;\r\n    const holeIndex = numbers.indexOf(hole);\r\n    if (canSwap(tileIndex, holeIndex, rows, cols)) {\r\n      const newNumbers = swap(numbers, tileIndex, holeIndex);\r\n      this.setState({ numbers: newNumbers }, function() {\r\n        if (isSolved(this.state.numbers)) {\r\n          this.handleTimerStop();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  buttonClick(event) {\r\n    this.shuffle();\r\n    this.handleTimerRestart();\r\n    this.handleTimerStart();\r\n  }\r\n\r\n  render() {\r\n    const { rows, cols, width, height } = this.props;\r\n    const { numbers } = this.state;\r\n    const solved = isSolved(this.state.numbers);\r\n    const pieceWidth = Math.round(width / cols);\r\n    const pieceHeight = Math.round(height / rows);\r\n    const style = {\r\n      ...tilesStyle,\r\n      width,\r\n      height\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <ul style={style}>\r\n          {numbers.map((number, index) => (\r\n            <Tile\r\n              {...this.props}\r\n              index={index}\r\n              number={number}\r\n              key={number}\r\n              width={pieceWidth}\r\n              height={pieceHeight}\r\n              onClick={this.handleTileClick}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <h2 style={timerStyle}>\r\n          Your time: {this.state.minutes < 10 ? \"0\" : \"\"}\r\n          {this.state.minutes}\r\n          {this.state.seconds < 10 ? \":0\" : \":\"}\r\n          {this.state.seconds}\r\n          {this.state.cSeconds < 10 ? \".0\" : \".\"}\r\n          {this.state.cSeconds}\r\n        </h2>\r\n        <button\r\n          style={buttonStyle}\r\n          onClick={this.buttonClick.bind(this)}\r\n        >\r\n          {solved ? \"start\" : \"Restart\"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Puzzle extends Component {\r\n  render() {\r\n    return <Tiles rows={3} cols={3} hole={8} width={300} height={300} />;\r\n      }\r\n}\r\n\r\nexport default Puzzle\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Puzzle from \"../components/Puzzle\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\n\r\nclass TestLogique extends Component {\r\n  render() {\r\n    return (\r\n      <Container className=\"testLogique\">\r\n        <Grid container direction=\"row-reverse\">\r\n          <Grid container justify=\"center\" direction=\"column\" className=\"testLogiqueContent\" item xs={12} md={6} >\r\n            <Container>\r\n              <h3>Test de logique Avant - Après</h3>\r\n              <p>\r\n                Voici un test de logique développé pour vous permettre d'évaluer\r\n                concrètement le gain offert par la puce GT2100. Reconstituer le\r\n                puzzle suivant, prend en moyenne 2,1 secondes à nos clients\r\n                augmentés.\r\n              </p>\r\n              <p>\r\n                Vous pouvez facilement tester vos capacités actuelles afin de\r\n                mieux apprécier les testLogique liés à l'augmentation.\r\n              </p>\r\n              <p>\r\n                Voici le test, veillez à bien noter votre temps:\r\n              </p>\r\n            </Container>\r\n          </Grid>\r\n          <Grid className=\"testLogiqueIllu\" item xs={12} md={6}>\r\n            <Puzzle />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestLogique;\r\n","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Header from './containers/Header';\nimport Interface from './containers/Interface';\nimport Technologie from './containers/Technologie';\nimport Gt2100 from './containers/Gt2100';\nimport Avantages from './containers/Avantages';\nimport AspectsLegaux from './containers/AspectsLegaux';\nimport Contact from './containers/Contact';\nimport TestLogique from './containers/TestLogique';\n\nimport headerimg from \"./assets/images/header.jpg\";\n\nconst bgSecondary = {\n  backgroundColor: \"#e6e6e6\"\n};\nconst headerStyle = {\n  backgroundImage: `url(${headerimg})`,\n  backgroundSize: \"cover\",\n  backgroundPosition: \"center\",\n  backgroundRepeat: \"no-repeat\",\n  minHeight: \"50vh\",\n  display: \"flex\"\n};\n\nfunction App() {\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Box style={headerStyle}>\n          <Header />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Box p={2}>\n          <Interface />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Box p={2} style={bgSecondary}>\n          <Technologie />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Box p={2}>\n          <Gt2100 />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Box p={2} style={bgSecondary}>\n          <Avantages />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Box p={2}>\n          <TestLogique />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Box p={2} style={bgSecondary}>\n          <AspectsLegaux />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Box p={2}>\n          <Contact />\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}